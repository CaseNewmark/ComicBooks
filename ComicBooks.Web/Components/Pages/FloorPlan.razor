@page "/floorplans"
@inject ComicBooksApiClient ComicBooksApiClient
@inject NavigationManager NavigationManager
@using ComicBooks.SharedDtos
@rendermode InteractiveServer

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <h3>Create Floor Plan</h3>
            <div class="input-group mb-3">
                <input @bind="floorPlanName" class="form-control" placeholder="Floor Plan Name" />
                <button class="btn btn-primary" @onclick="CreateFloorPlan">Create</button>
            </div>
            @if (createdFloorPlan is not null)
            {
                <div class="alert alert-success mt-2">
                    Created Floor Plan: <strong>@createdFloorPlan.Name</strong> (ID: @createdFloorPlan.Id)
                </div>
            }

            <h3 class="mt-4">Existing Floor Plans</h3>
            @if (floorPlans is null)
            {
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            else if (!floorPlans.Any())
            {
                <div class="alert alert-info">No floor plans found.</div>
            }
            else
            {
                <ul class="list-group">
                    @foreach (var plan in floorPlans)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center"
                            @ondblclick="@(() => NavigationManager.NavigateTo($"/floorplans/edit/{plan.Id}"))">
                            <span>
                                <strong>@plan.Name</strong>
                                <small class="text-muted ms-2">(ID: @plan.Id)</small>
                            </span>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteFloorPlan(plan.Id)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</div>

@code {
    private string floorPlanName = string.Empty;
    private FloorPlanDto? createdFloorPlan;
    private List<FloorPlanDto>? floorPlans;

    private async Task CreateFloorPlan()
    {
        createdFloorPlan = await ComicBooksApiClient.CreateFloorPlanAsync(floorPlanName);
        floorPlans = await ComicBooksApiClient.GetAllFloorPlansAsync();
        floorPlanName = string.Empty;
    }

    private async Task DeleteFloorPlan(Guid id)
    {
        await ComicBooksApiClient.DeleteFloorPlanAsync(id);
        floorPlans = await ComicBooksApiClient.GetAllFloorPlansAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        floorPlans = await ComicBooksApiClient.GetAllFloorPlansAsync();
    }
}